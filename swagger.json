swagger: "2.0"
info:
  description: "This is an Express server used to manage identity provider services. Users manage services by creating requests handled by administrators. You can find out more about the project on the [github page](https://github.com/rciam/rciam-service-registry) or you can try it out live  [here](http://service-registry.aai-dev.grnet.gr:3000/). Most routes are protected with a passport authentication strategy that uses cookies to store user data upon login. For logins express redirects users to [https://aai-dev.egi.eu/oidc/](https://aai-dev.egi.eu/oidc/) where they have to choose their identity provider."
  version: "1.0.0"
  title: "Service Registry"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Rciam"
    url: "https://github.com/rciam"
host: "swagger.io"
basePath: "/v2"
tags:
- name: "Authentication"
  description: "Authentication Login Logout"
- name: "Services"
  description: "Manage Services"
- name: "Petitions"
  description: "Manage Petition Requests"
- name: "User"
  description: "Operations about user"
schemes:
- "https"
- "http"
paths:
  /login:
    get:
      tags:
      - "Authentication"
      summary: "Redirects Users to Proxy"
      description: "This route redirects user to https://aai-dev.egi.eu/oidc/ where user is prompted to choose an identity provider and login."
      operationId: "login"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "301":
          description: "Redirected"
  /logout:
    get:
      tags:
      - "Authentication"
      summary: "Terminates user session and requests logout from proxy"
      description: "This route clears the user from the local storage and ends the session, after which we will redirect the user to the public route."
      operationId: "logout"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "401":
          description: "Not Authenticated request."
      security:
        - cookieAuth: []
  /auth:
    get:
      tags:
      - "Authentication"
      summary: "Returns authentication status"
      description: "Returns status 200 if user is Authenticated"
      operationId: "auth"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Authenticated user"
        "401":
          description: "Unauthenticated user"
      security:
        - cookieAuth: []
  /user:
    get:
      tags:
      - "User"
      summary: "Returns user-info with admin status"
      description: ""
      operationId: "getUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "401":
          description: "Unauthenticated request"
      security:
      - cookieAuth: []
  /callback:
    get:
      tags:
      - "Authentication"
      summary: "Redirects user back to react app after login"
      description: "This route handles redirects from the authentication proxy, saves user info creating a cookie session and redirects to react app."
      operationId: "callback"
      consumes:
      - "application/json"
      produces:

      - "application/json"
      responses:
        "301":
          description: "Redirects to React App"
      security:
      - cookieAuth: []
  /auth/mock:
    get:
      tags:
      - "Authentication"
      summary: "Mocking login for running tests"
      description: "This route mocks authentication proccess creating a session with a preconfigured user in order to run tests."
      operationId: "mockAuth"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Forbidden resourse, route only availabe in test mode"
      security:
      - cookieAuth: []
  /petition:
    post:
      tags:
      - "Petitions"
      summary: "Create new petition"
      description: ""
      operationId: "addPetition"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Petition object that needs to be added to the regisrtry"
        required: true
        schema:
          $ref: "#/definitions/Petition"
      responses:
        "200":
          description: OK
        "401":
          description: "Unauthenticated request"
        "422":
          description: "Invalid Data"
        "500":
          description: "Internal Error"
      security:
      - cookieAuth: []
  /petition/{id}:
    get:
      tags:
      - "Petitions"
      summary: "Get petition"
      description: ""
      operationId: "getPetition"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of petition to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Succesfull"
          schema:
            $ref: "#/definitions/Petition"
        "401":
          description: "Unauthenticated request"
        "422":
          description: "Invalid Data"
        "500":
          description: "Internal Error"
      security:
      - cookieAuth: []
    put:
      tags:
      - "Petitions"
      summary: "Edit petition"
      description: ""
      operationId: "updatePetition"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of petition to edit"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Petition object that needs to be added to the regisrtry"
        required: true
        schema:
          $ref: "#/definitions/Petition"
      responses:
        "200":
          description: OK
        "401":
          description: "Unauthenticated request"
        "422":
          description: "Invalid Data"
        "500":
          description: "Internal Error"
      security:
      - cookieAuth: []
    delete:
      tags:
      - "Petitions"
      summary: "Delete petition"
      description: ""
      operationId: "deletePetition"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of petition to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: OK
        "401":
          description: "Unauthenticated request"
        "500":
          description: "Internal Error"
      security:
      - cookieAuth: []
  /petition/delete/{service_id}:
    put:
      tags:
      - "Petitions"
      summary: "Create petition to delete service"
      description: "This route creates delete petition or edits type of existing petition"
      operationId: "addDeletePetition"
      parameters:
        - name: "service_id"
          in: "path"
          description: "ID of service to be deleted"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: OK
        "401":
          description: "Unauthenticated request"
        "500":
          description: "Internal Error"
      security:
      - cookieAuth: []
  /service/{id}:
    get:
      tags:
      - "Services"
      summary: "Finds service by id"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "getService"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of service to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful"
          schema:
            $ref: "#/definitions/Service"
        "400":
          description: "Invalid status value"
      security:
      - cookieAuth: []
  /petition/reject/{id}:
    put:
      tags:
      - "Petitions"
      summary: "Reject Petition"
      description: ""
      operationId: "reviewReject"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of petition to reject"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: OK
        "204":
          description: "Petition not found"
        "401":
          description: "Unauthenticated request"
        "500":
          description: "Internal Error"
      security:
      - cookieAuth: []
  /petition/approve/{id}:
    put:
      tags:
      - "Petitions"
      summary: "Approve Petition"
      description: ""
      operationId: "reviewApprove"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of petition to approve"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: OK
        "204":
          description: "Petition not found"
        "401":
          description: "Unauthenticated request"
        "500":
          description: "Internal Error"
      security:
      - cookieAuth: []
  /petition/changes/{id}:
    put:
      tags:
      - "Petitions"
      summary: "Request petition changes"
      description: ""
      operationId: "ReviewChanges"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of petition to request changes"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: OK
        "204":
          description: "Petition not found"
        "401":
          description: "Unauthenticated request"
        "500":
          description: "Internal Error"
      security:
      - cookieAuth: []
  /servicelist:
    get:
      tags:
      - "Services"
      summary: "Find all available services"
      description: "Returns all available services"
      operationId: "servicelist"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
              additionalProperties:
                $ref: "#/definitions/ServiceList"
        "401":
          description: "Unauthenticated request"
        "500":
          description: "Internal Error"
      security:
      - cookieAuth: []
  /service/pending:
    get:
      tags:
      - "Services"
      summary: "Retrieve pending services"
      description: "Route used from ams-agent to get all service ready to deploy and push them to the ams topic"
      operationId: "getPendingServices"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pending"
        "401":
          description: "Unauthenticated request"
        "500":
          description: "Internal Error"
      security:
      - cookieAuth: []
  /service/state:
    post:
      tags:
      - "Services"
      summary: "Route that Ams posts deployment results"
      description: ""
      operationId: "postState"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Ams formated messages containing results for deployment requests"
        required: true
        schema:
          $ref: "#/definitions/AmsPending"
      responses:
        "200":
          description: "successful operation"
        "500":
          description: "Internal Error"
      security:
      - cookieAuth: []
    put:
      tags:
      - "Services"
      summary: "Edit service state"
      description: "Route used by ams agent to update state once service changes have been push to the ams"
      operationId: "putState"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/PutState"
      responses:
        "200":
          description: "successful operation"
        "500":
          description: "internal error"
      security:
      - cookieAuth: []
  /service/history/{id}:
    get:
      tags:
      - "Services"
      summary: "Retrieve service history"
      description: ""
      operationId: "findServiceHistory"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of service to retrieve history"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
              $ref: "#/definitions/History"
        "204":
          description: "Service could not be found"
        "500":
          description: "internal error"
      security:
      - cookieAuth: []
  /petition/history/{id}:
    get:
      tags:
      - "Petitions"
      summary: "Retrieve single petition from history"
      description: ""
      operationId: "getPetitionOld"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of petition to retrieve"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Service"
        "400":
          description: "Invalid tag value"
      security:
      - cookieAuth: []
  /petition/availability/{protocol}/{protocol-id}:
    get:
      tags:
      - "Petitions"
      summary: "Check availability of protocol id"
      description: ""
      operationId: "Idavailability"
      produces:
      - "application/json"
      parameters:
      - name: "protocol"
        in: "path"
        description: "Protocol of petition"
        required: true
        type: "string"
      - name: "protocol-id"
        in: "path"
        description: "ID of petition to retrieve"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              available:
                type: "boolean"
                description: ""
        "400":
          description: "Invalid tag value"
      security:
      - cookieAuth: []
securityDefinitions:
  cookieAuth:
    type: "apiKey"
    in: "header"
    name: "connect.sid"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      name:
        type: "string"
      given_name:
        type: "string"
      family_name:
        type: "string"
      preffered_username:
        type: "string"
      sub:
        type: "string"
        description: "Unique identifier"
      email:
        type: "string"
        format: "email"
      eduperson_entitlement:
        type: "array"
        items:
          type: "string"
          description: "User entitlements"
      eduperson_assurance:
        type: "array"
        items:
          type: "string"
          description: "User assurance"
      acr:
        type: "string"
        format: "uri"
      edu_person_entitlements:
        type: "array"
        items:
          type: "string"
          description: "User entitlements"
      tenant_id:
        type: "string"
        description: "Unique tenant identification"
  Petition:
    type: "object"
    properties:
      type:
        type: "string"
        enum:
        - "edit"
        - "create"
        - "delete"
      service_id:
        type: "string"
        description: "Required on edit and delete petition requests"
      service_name:
        type: "string"
        description: "Human-readable application name"
      service_description:
        type: "string"
        description: "Human-readable text description"
      logo_uri:
        type: "string"
        format: "uri"
        description: "URL that points to a logo image"
      policy_uri:
        type: "string"
        format: "uri"
        description: "URL for the Policy Statement of this service"
      integration_environment:
        type: "string"
        enum:
        - "demo"
        - "development"
        - "production"
      contacts:
        type: "array"
        items:
          type: "object"
          properties:
            email:
              type: "string"
              format: "email"
            type:
              type: "string"
              enum:
              - "admin"
              - "support"
              - "technical"
              - "security"
      protocol:
        type: "string"
        enum:
        - "oidc"
        - "saml"
      entity_id:
        type: "string"
        description: "Unique identifier for saml services"
      metadata_uri:
        type: "string"
        format: "uri"
        description: "Metadata uri for saml services"
      client_id:
        type: "string"
        description: "Unique identifier for oidc services"
      grant_types:
        type: "array"
        items:
          type: "string"
          enum:
          - "implicit"
          - "authorization_code"
          - "refresh_token"
          - "client_credentials"
          - "password"
          - "redelegation"
          - "token_exchange"
          - "device"
        description: "oidc specific"
      scopes:
        type: "array"
        items:
          type: "string"
          enum:
          - "openid"
          - "email"
          - "profile"
          - "offline_access"
          - "eduperson_entitlement"
          - "eduperson_scoped_affiliation"
          - "eduperson_unique_id"
          - "refeds_edu"
        description: "oidc specific"
      allow_introspection:
        type: "boolean"
        description: "Allow calls to the Introspection Endpoint. For oidc services."
      code_challenge_method:
        type: "string"
        enum:
        - "plain"
        - "S256"
        description: "Proof Key for Code Exchange (PKCE) Code Challenge Method. For oidc services."
      client_secret:
        type: string
        format: "password"
        description: "Client secret, oidc specific"
      generate_client_secret:
        type: boolean
        description: "Prompts backend to generate value for client secret. Oidc specific"
      reuse_refresh_tokens:
        type: "boolean"
        description: "Adds the offline_access scope to the client's scope, oidc specific"
      clear_access_tokens_on_refresh:
        type: "boolean"
        description: "oidc specific"
      device_code_validity_seconds:
        type: integer
        multipleOf: 10
        minimum: 0
        maximum: 1000000
        description: "oidc specific"
      access_token_validity_seconds:
        type: integer
        multipleOf: 10
        minimum: 0
        maximum: 1000000
        description: "oidc specific"
      refresh_token_validity_seconds:
        type: integer
        multipleOf: 10
        minimum: 0
        maximum: 1000000
        description: "oidc specific"
      id_token_timeout_seconds:
        type: integer
        multipleOf: 10
        minimum: 0
        maximum: 1000000
        description: "oidc specific"
  Service:
    type: "object"
    properties:
      service_name:
        type: "string"
        description: "Human-readable application name"
      service_description:
        type: "string"
        description: "Human-readable text description"
      logo_uri:
        type: "string"
        format: "uri"
        description: "URL that points to a logo image"
      policy_uri:
        type: "string"
        format: "uri"
        description: "URL for the Policy Statement of this service"
      integration_environment:
        type: "string"
        enum:
        - "demo"
        - "development"
        - "production"
      contacts:
        type: "array"
        items:
          type: "object"
          properties:
            email:
              type: "string"
              format: "email"
            type:
              type: "string"
              enum:
              - "admin"
              - "support"
              - "technical"
              - "security"
      protocol:
        type: "string"
        enum:
        - "oidc"
        - "saml"
      entity_id:
        type: "string"
        description: "Unique identifier for saml services"
      metadata_uri:
        type: "string"
        format: "uri"
        description: "Metadata uri for saml services"
      client_id:
        type: "string"
        description: "Unique identifier for oidc services"
      grant_types:
        type: "array"
        items:
          type: "string"
          enum:
          - "implicit"
          - "authorization_code"
          - "refresh_token"
          - "client_credentials"
          - "password"
          - "redelegation"
          - "token_exchange"
          - "device"
        description: "oidc specific"
      scopes:
        type: "array"
        items:
          type: "string"
          enum:
          - "openid"
          - "email"
          - "profile"
          - "offline_access"
          - "eduperson_entitlement"
          - "eduperson_scoped_affiliation"
          - "eduperson_unique_id"
          - "refeds_edu"
        description: "oidc specific"
      allow_introspection:
        type: "boolean"
        description: "Allow calls to the Introspection Endpoint. For oidc services."
      code_challenge_method:
        type: "string"
        enum:
        - "plain"
        - "S256"
        description: "Proof Key for Code Exchange (PKCE) Code Challenge Method. For oidc services."
      client_secret:
        type: string
        format: "password"
        description: "Client secret, oidc specific"
      generate_client_secret:
        type: boolean
        description: "Prompts backend to generate value for client secret. Oidc specific"
      reuse_refresh_tokens:
        type: "boolean"
        description: "Adds the offline_access scope to the client's scope, oidc specific"
      clear_access_tokens_on_refresh:
        type: "boolean"
        description: "oidc specific"
      device_code_validity_seconds:
        type: integer
        multipleOf: 10
        minimum: 0
        maximum: 1000000
        description: "oidc specific"
      access_token_validity_seconds:
        type: integer
        multipleOf: 10
        minimum: 0
        maximum: 1000000
        description: "oidc specific"
      refresh_token_validity_seconds:
        type: integer
        multipleOf: 10
        minimum: 0
        maximum: 1000000
        description: "oidc specific"
      id_token_timeout_seconds:
        type: integer
        multipleOf: 10
        minimum: 0
        maximum: 1000000
        description: "oidc specific"
  ServiceList:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        comment:
          type: "string"
          description: "Comment from admin on pending request"
        deleted:
          type: "boolean"
          description: "Service is pending deletion"
        requester:
          type: "string"
          example: "7a6ae5617ea76389401e3c3839127fd2a019572066d40c5d0176bd242651f934@egi.eu"
          description: "Requesters sub"
        state:
          type: "string"
          enum:
          - "deployed"
          - "error"
          - "waiting-deployment"
          - "pending"
          description: "State of the service"
        type:
          type: "string"
          enum:
          - "edit"
          - "create"
          - "delete"
          description: "Type of pending petition if exists"
        status:
          type: "string"
          enum:
          - "pending"
          - "approved"
          - "rejected"
          - "aproved_changes"
        service_name:
          type: "string"
          description: "Human-readable application name"
        service_description:
          type: "string"
          description: "Human-readable text description"
        logo_uri:
          type: "string"
          format: "uri"
          description: "URL that points to a logo image"
        integration_environment:
          type: "string"
          enum:
          - "demo"
          - "development"
          - "production"
  Pending:
    type: "object"
    properties:
      services:
        type: "array"
        items:
          type: "object"
          properties:
            additionalProperties:
              $ref: "#/definitions/Petition"
  AmsPending:
    type: "object"
    properties:
      messages:
        type: "array"
        items:
          type: "object"
          properties:
            message:
              type: "object"
              properties:
                atributes:
                  type: "object"
                  properties:
                    key:
                      type: "string"
                      default: "value"
                data:
                  type: "string"
                  example: "SGVsbG8gQ2xvdWQgUHViL1N1YiEgSGVyZSBpcyBteSBtZXNzYWdlIQ=="
                messageId:
                  type: "string"
                  example: "136969346945"
            subscription:
              type: "string"
              default: "/projects/rciam-service-registry/subscriptions/express-push"
  PutState:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          description: "Id of service"
          type: "integer"
          format: "int64"
        state:
          description: "State of service"
          type: "string"
          enum:
          - "deployed"
          - "error"
          - "waiting-deployment"
          - "pending"
  History:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          description: "Id of petition"
          type: "integer"
          format: "int64"
        comment:
          description: "Comment from admin"
          type: "string"
        status:
          type: "string"
          description: "Review status"
          enum:
          - "approved"
          - "rejected"
          - "approved_with_changes"
          - "pending"
        type:
          type: "string"
          description: "Type of petition request"
          enum:
          - "create"
          - "edit"
          - "delete"
        reviewed_at:
          type: "string"
          format: "data-time"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
